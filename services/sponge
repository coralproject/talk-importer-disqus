#!/usr/bin/env node

const TalkService = require('./talk-service');
const {userService} = require('./talkServices');

class Sponge {

  constructor(strategy, source) {
    this.strategy = strategy;
    this.source = source;
    this.talk = new TalkService(strategy.service.url);
  }

  async translate(post, entity) {
      let c = {};
      let fields = this.strategy.map.entities[entity].fields;

      for (let field in fields) {
        await this.transform_field(post, fields[field], this.strategy.name)
        .then((value) => {
          c[field] = value;
        })
        .catch((error) => {
          console.log('Error when transforming field ', field, error);
        });
      }

      return this.talk.createComment(c).then((comment) => {

        // To Do: once is created it needs to add any flags to the actions
        // Look if it is flagged
        if (comment != undefined && comment.metadata.isFlagged) {
          let action = {};

          action.action_type = 'FLAG';
          action.item_type = 'COMMENTS';
          action.item_id = comment.id;
          action.user_id = null;
          action.group_id = 'Other';
          action.metadata = { 'message': this.strategy.name};

          this.talk.createAction(action);
        }
        return comment;
      })
      .catch((error) => {
        console.log(`There was an error creating the comment ${error}.`)
      });
  }

  async transform_field(old_comment, field, source_name) {
    switch(field.relation) {
    case 'Identity':
      return new Promise((resolve, reject) => {
        let value = this.get_value(old_comment, field);
        if (value == undefined) {
          return reject(`Did not found value for field ${field.source}.`);
        }
        return resolve(value);
      });

    case 'FindOrCreateUser':
      return new Promise((resolve, reject) => {
        let user_id = this.transform_user(old_comment[field.source], field.map.fields, source_name);
        if (user_id == undefined) {
          return reject('Error on getting user field.');
        }
        return resolve(user_id);
      });

    case 'FindOrCreateAsset':

      let old_asset = await this.source.get_asset(old_comment[field.source]);
      let asset_id = await this.create_asset(old_asset, field.map.fields, source_name);

      return new Promise((resolve, reject) => {
        if (asset_id == undefined) {
          return reject('Error on getting asset field.');
        }
        return resolve(asset_id);
      });

    case 'Status':
      return new Promise((resolve, reject) => {
        let value = this.get_value(old_comment, field);
        if (value == undefined) {
          return reject(`Error getting the status value for ${field.source}`);
        }
        return resolve(field['status'][value]);
      });

    case 'Parent':
      let parent_id = this.create_parent(old_comment, field);
      return new Promise((resolve) => {
        return resolve(parent_id);
      });

    case 'Metadata':
      return new Promise((resolve, reject) => {
        let value = this.get_metadata(old_comment, field);
        if (value == undefined) {
          return reject('Error on getting metadata field.');
        }
        return resolve(value);
      });
    default:
      return new Promise((reject) => {
        return reject('Relation not found.');
      });
    }
  }

  get_value(old_comment, field) {
    return old_comment[field.source];
  }

  get_metadata(old_comment, field) {
    let metadata = {};
    for (let f of field['fields']) {
      metadata[f['name']] = this.get_value(old_comment, f);
    }
    return metadata;
  }

  async transform_user(old_user, fields, source_name) {
    let userData = {};

    for (let field in fields) {
      if (fields.hasOwnProperty(field)) {
        try {
          userData[field] = await this.transform_field(old_user, fields[field], source_name);
        } catch (error) {
          console.log(`error ${error}`);
        }
      }
    }

    const {name: providerName, migration_id: migrationId} = this.strategy;
    let username = userData.displayName;

    // If a migration_id was defined in the strategy file append it to the
    // username to ensure that migrated usernames don't collide with new or
    // existing usernames.
    if (migrationId) {
      username = username + migrationId;
    }
    userData.provider = providerName;
    userData.id = username;

    return this.talk.createUser(userData)
      .then((user) => {
        if (user !== undefined) {
          return user.id;
        }
        console.log('Error as returned undefined user.');
      })
      .catch((error) => {
        console.log('Error ', error);
      });
  }

  async create_asset(old_asset, fields, source_name) {
    let promises = [];
    let a = {};
    for (let f in fields) {
      a[f] = await this.transform_field(old_asset, fields[f], source_name);
    }

    let asset = await this.talk.createAsset(a);
    return asset.id;
  }

  async create_parent(old_comment, field) {

    // I need to get that source parent id
    let source_parent_id = this.get_value(old_comment,field);

    if (source_parent_id == undefined) {
      return null;
    };

    //  first go look at it in talk by metadata.id
    return this.talk.findCommentByField(field.search_id, source_parent_id)
    .then((parent_comment) => {

      // If not found then go to the external source to get the comment, create it and attach it to the parent
      if (parent_comment == null) {
        this.source.find_comment(source_parent_id)
        .then((p) => {
          return this.translate(p, 'comments')
          .then((comment) => {
            if (comment != undefined) {
              return comment.id;
            }
          });
        });
        return null;
      }
      return parent_comment.id;
    })
  }

}

module.exports = Sponge;
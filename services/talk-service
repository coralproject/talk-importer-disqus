#!/usr/bin/env node

// @todo better comment
// Imports within Coral Talk assume CWD of Talk root.
const path = require('path');
const cwd = process.cwd();
process.chdir(path.resolve(`${__dirname}/talk`));

const commentService = require('./talk/services/comments');
const userService = require('./talk/services/users');
const assetService = require('./talk/services/assets');
const actionService = require('./talk/services/actions');

// Return CWD to original value.
process.chdir(path.resolve(cwd));

const commentModel = require('./talk/models/comment');

class Talk {
    constructor(){
        console.log('Connecting to Talk API Client.');
    }

    findComment(id) {
        return commentService.findById(id)
        .then((c) => {
            return c;
        })
        .catch((error) => {
            console.log('Error when finding comment: ', error);
        });
    }

    findCommentByField(field, value) {
        return commentModel.findOne({field: value});
    }

    createComment(comment) {
        return commentService.publicCreate(comment)
        .then((c) => {
            return c;
        })
        .catch((error) => {
            console.log('Error when creating comment: ', error);
        });
    }

  async createUser(user) {
    const {id, provider, displayName} = user;
    try {
      return await userService.findOrCreateExternalUser({
        id,
        provider,
        displayName
      });
    } catch (err) {

      // Fallback to username lookup.
      const user = await userService.search(
        userService.castUsername(displayName)
      );

      if (!user) {
        throw err;
      }

      return user;
    }
  }

  // @todo Update readme with info on whitelisting domain before migrating
  createAsset(asset) {
    return assetService.findOrCreateByUrl(asset.url)
      .then((a) => {

        // Assign the remaining transformed asset properties.
        a = Object.assign(a, asset);
        return a.save();
      })
      .catch((error) => {
        console.error('Error when creating asset: ', asset.url, error); // eslint-disable-line no-console
      });
  }

    createAction(action) {
        return actionService.insertUserAction(action)
        .then((a) => {
            return a;
        })
        .catch((error) => {
            console.log(`Error when creating action on ${action.item_id}: ${error}`);
        });
    }
}

module.exports = Talk;
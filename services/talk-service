#!/usr/bin/env node

const {
  commentService,
  userService,
  assetService,
  actionService,
  commentModel,
} = require('./talkServices');

class Talk {
    constructor(){
        console.log('Connecting to Talk API Client.');
    }

    findComment(id) {
        return commentService.findById(id)
        .then((c) => {
            return c;
        })
        .catch((error) => {
            console.log('Error when finding comment: ', error);
        });
    }

    findCommentByField(field, value) {
        return commentModel.findOne({field: value});
    }

    createComment(comment) {
        // @todo, we could try to find the comment first
        return commentService.publicCreate(comment)
        .then((c) => {
            return c;
        })
        .catch((error) => {
            console.log('Error when creating comment: ', error);
        });
    }

  // User needs {id, provider, displayName}
  // TODO: A decision needs to be made about the provider.
  createUser(user) {

    let id = user.id;
    let provider = user.provider;
    let displayName = user.displayName;

    return userService.findOrCreateExternalUser({id, provider, displayName});
  }

  // @todo Update readme with info on whitelisting domain before migrating
  // @todo Update readme to make sure displayname mapping is unique
  // @todo Update readme to inform that comments will be duplicated
  createAsset(asset) {
    return assetService.findOrCreateByUrl(asset.url)
      .then((a) => {

        // Assign the remaining transformed asset properties.
        a = Object.assign(a, asset);
        return a.save();
      })
      .catch((error) => {
        console.error('Error when creating asset: ', asset.url, error); // eslint-disable-line no-console
      });
  }

    createAction(action) {
        return actionService.insertUserAction(action)
        .then((a) => {
            return a;
        })
        .catch((error) => {
            console.log(`Error when creating action on ${action.item_id}: ${error}`);
        });
    }
}

module.exports = Talk;
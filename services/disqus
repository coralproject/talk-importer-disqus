#!/usr/bin/env node

const neo_disqus = require('neo-disqus')

const Source = require('./source');

class Disqus extends Source {
  constructor(service) {
    super();

    // Connect to disqus.
    this.client = new neo_disqus({
      access_token: service.access_token,
      api_key: service.api_key,
      api_secret: service.api_secret
    });

    this.next = null;
    this.assetCache = {};

    this.get_comments = this.get_comments.bind(this);
    this.hasMore = this.hasMore.bind(this);
  }

  find_comment(id) {
    const params = { post: id };
    return this.client.get("posts/details", params).then((result) => {
      return result.response;
    });

    // it needs to return post.response
  }

  get_comments(forum) {
    const params = { forum: forum, limit: 3 };

    if (this.hasMore()) {
      params.cursor = this.next;
    }

    return this.client
      .get('forums/listPosts', params)
      .then(({response, cursor}) => {
        this.next = cursor.hasNext && cursor.next || null;
        return response;
      });
  }

  get_asset(thread_id) {
    const params = {thread: thread_id};

    // Avoid requesting the same thread for every thread's post.
    if (this.assetCache[thread_id]) {
      return Promise.resolve(this.assetCache[thread_id]);
    }

    return this.client.get('threads/details', params).then((result) => {
      this.assetCache[thread_id] = result.response;
      return result.response;
    });
  }

  hasMore() {
    return !!this.next;
  }
}

module.exports = Disqus;